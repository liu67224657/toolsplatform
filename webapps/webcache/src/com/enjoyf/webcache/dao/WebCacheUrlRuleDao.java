package com.enjoyf.webcache.dao;import com.enjoyf.framework.jdbc.bean.DataBean;import com.enjoyf.framework.jdbc.exception.JoymeDBException;import com.enjoyf.framework.jdbc.impl.BaseJDBCDAOImpl;import com.enjoyf.webcache.bean.*;import java.sql.Connection;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;public class WebCacheUrlRuleDao extends BaseJDBCDAOImpl {    /**     * date 2015-08-26 17:27:31     *     * @param ruleId     * @return WebcacheUrlrule     * @author shenqiv0.1     */    public WebCacheUrlRule getWebCacheUrlRule(Connection conn, String ruleId) throws JoymeDBException {        DataBean dbean = null;        try {            String sql = "SELECT * FROM webcache_urlrule  WHERE rule_id = ?";            List objectList = new ArrayList();            objectList.add(ruleId);            dbean = this.executeBindingQuery(conn, sql, objectList.toArray());            List retList = new ArrayList();            ResultSet rs = dbean.getRs();            while (rs.next()) {                return rsToObjet(rs);            }            return null;        } catch (Exception e) {            throw new JoymeDBException(e);        } finally {            this.cleanup(dbean, false);        }    }    private WebCacheUrlRule rsToObjet(ResultSet rs) throws SQLException {        WebCacheUrlRule urlRule = new WebCacheUrlRule();        urlRule.setRuleId(rs.getString("rule_id"));        urlRule.setDesHost(rs.getString("des_host"));        urlRule.setDesRule(rs.getString("des_rule"));        urlRule.setSrcRule(rs.getString("src_rule"));        urlRule.setClientType(WebCacheClientType.getByCode(rs.getInt("client_type")));        urlRule.setSrcType(WebCacheSrcType.getByCode(rs.getInt("src_type")));        urlRule.setStatus(IntStatus.getByCode(rs.getInt("status")));        urlRule.setGlobalSetting(WebCacheGlobalSetting.parse(rs.getString("global_setting")));        urlRule.setCdnType(WebCacheCdnType.getByCode(rs.getInt("cdn_type")));        urlRule.setPageKey(rs.getString("page_key"));        return urlRule;    }    /**     * date 2015-08-26 17:27:32     *     * @param bean     * @return int 1 success, 0 failed     * @author shenqiv0.1     */    public int insertWebcacheUrlrule(Connection conn, WebCacheUrlRule bean) throws JoymeDBException {        try {            String sql = "INSERT INTO webcache_urlrule(rule_id,des_host,des_rule,src_rule,src_type," +                    "status,global_setting,client_type,cdn_type,page_key) VALUES (?,?,?,?,?,?,?,?,?,?)";            Object[] objects = new Object[]{                    bean.getRuleId(),                    bean.getDesHost(),                    bean.getDesRule(),                    bean.getSrcRule(),                    bean.getSrcType().getCode(),                    bean.getStatus().getCode(),                    bean.getGlobalSetting().toJson(),                    bean.getClientType().getCode(),                    bean.getCdnType().getCode(),                    bean.getPageKey()            };            return this.executeBindingUpdate(conn, sql, objects, false, false);        } catch (Exception e) {            throw new JoymeDBException(e);        }    }    /**     * date 2015-08-26 17:27:32     *     * @param bean     * @param ruleId     * @return int 1     * <p/>     * success, 0 failed     * @author shenqiv0.1     */    public int updateWebcacheUrlrule(Connection conn, WebCacheUrlRule bean, String ruleId) throws JoymeDBException {        try {            String sql = "UPDATE webcache_urlrule SET $updateStr  WHERE rule_id = ?";            List objectList = new ArrayList();            List columnList = bean.getNotNullColumnList();            sql = sql.replace("$updateStr", this.setUpdate(columnList, objectList));            objectList.add(ruleId);            return this.executeBindingUpdate(conn, sql, objectList.toArray(), false, false);        } catch (Exception e) {            throw new JoymeDBException(e);        }    }    /**     * date 2015-08-26 17:27:32     *     * @param ruleId     * @return int 1 success, 0 failed     * @author shenqiv0.1     */    public int deleteWebCacheUrlRule(Connection conn, String ruleId) throws JoymeDBException {        try {            String sql = "DELETE FROM webcache_urlrule  WHERE rule_id = ?";            List objectList = new ArrayList();            objectList.add(ruleId);            return this.executeBindingUpdate(conn, sql, objectList.toArray(), false, false);        } catch (Exception e) {            throw new JoymeDBException(e);        }    }    public List queryWebcacheUrlrule(Connection conn, int status, Integer srcType, Integer clientType, Integer channel) throws JoymeDBException {        DataBean dbean = null;        try {            String sql = "SELECT * FROM webcache_urlrule where status=?";            List objectList = new ArrayList();            objectList.add(status);            if (srcType != null) {                sql += " AND src_type=?";                objectList.add(srcType);            }            if (clientType != null) {                sql += " AND client_type=?";                objectList.add(clientType);            }            if (channel != null) {                sql += " AND channel=?";                objectList.add(channel);            }            dbean = this.executeBindingQuery(conn, sql, objectList.toArray());            List retList = new ArrayList();            ResultSet rs = dbean.getRs();            while (rs.next()) {                retList.add(rsToObjet(rs));            }            return retList;        } catch (Exception e) {            throw new JoymeDBException(e);        } finally {            this.cleanup(dbean, false);        }    }}