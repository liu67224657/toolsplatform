package com.enjoyf.activity.service;import com.enjoyf.activity.bean.qyz.Game;import com.enjoyf.activity.dao.GameDao;import com.enjoyf.framework.jdbc.exception.JoymeDBException;import com.enjoyf.framework.jdbc.exception.JoymeServiceException;import java.sql.Connection;import java.util.List;public class GameService {    private static GameDao gameDao = new GameDao();    /**     * date 2016-09-07 15:17:47     *     * @param gameId     * @return Game     * @author shenqiv0.1     */    public Game queryGamebyId(Connection conn, String gameId) throws JoymeDBException, JoymeServiceException {        boolean isCloseConn = (conn != null) ? false : true;        try {            if (conn == null)                conn = gameDao.getConnection();            return gameDao.queryGamebyId(conn, gameId);        } catch (JoymeDBException e) {            throw e;        } catch (Exception e) {            throw new JoymeServiceException(e);        } finally {            if (conn != null && isCloseConn)                gameDao.closeConnection(conn);        }    }    /**     * date 2016-09-07 19:03:38     * @author shenqiv0.1     * @param profileid     * @return List <sign>     */    public List querySignByGameCode(Connection conn,  String profileid) throws JoymeDBException, JoymeServiceException{        boolean isCloseConn = (conn != null) ? false : true;        try {            if (conn == null)                conn = gameDao.getConnection();            return gameDao.queryGameByProfileid(conn,  profileid);        } catch (JoymeDBException e) {            throw e;        } catch (Exception e) {            throw new JoymeServiceException(e);        } finally {            if (conn != null && isCloseConn)                gameDao.closeConnection(conn);        }    }    /**     * date 2016-09-07 15:17:47     *     * @param bean     * @return int 1 success, 0 failed     * @author shenqiv0.1     */    public int insertGame(Connection conn, Game bean) throws JoymeDBException, JoymeServiceException {        boolean isCloseConn = (conn != null) ? false : true;        try {            if (conn == null)                conn = gameDao.getConnection();            return gameDao.insertGame(conn, bean);        } catch (JoymeDBException e) {            throw e;        } catch (Exception e) {            throw new JoymeServiceException(e);        } finally {            if (conn != null && isCloseConn)                gameDao.closeConnection(conn);        }    }    /**     * date 2016-09-07 15:17:47     *     * @param bean     * @return int 1 success, 0 failed     * @author shenqiv0.1     */    public int updateGame(Connection conn, Game bean) throws JoymeDBException, JoymeServiceException {        boolean isCloseConn = (conn != null) ? false : true;        try {            if (conn == null)                conn = gameDao.getConnection();            return gameDao.updateGame(conn, bean);        } catch (JoymeDBException e) {            throw e;        } catch (Exception e) {            throw new JoymeServiceException(e);        } finally {            if (conn != null && isCloseConn)                gameDao.closeConnection(conn);        }    }    /**     * date 2016-09-07 15:17:47     *     * @param gameId     * @return int 1 success, 0 failed     * @author shenqiv0.1     */    public int deleteGame(Connection conn, Long gameId) throws JoymeDBException, JoymeServiceException {        boolean isCloseConn = (conn != null) ? false : true;        try {            if (conn == null)                conn = gameDao.getConnection();            return gameDao.deleteGame(conn, gameId);        } catch (JoymeDBException e) {            throw e;        } catch (Exception e) {            throw new JoymeServiceException(e);        } finally {            if (conn != null && isCloseConn)                gameDao.closeConnection(conn);        }    }}