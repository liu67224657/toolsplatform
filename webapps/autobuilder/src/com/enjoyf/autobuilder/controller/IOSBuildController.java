package com.enjoyf.autobuilder.controller;import com.enjoyf.autobuilder.bean.*;import com.enjoyf.autobuilder.config.AndroidConfigContainer;import com.enjoyf.autobuilder.config.IOSConfigContainer;import com.enjoyf.autobuilder.parse.IParseFactory;import com.enjoyf.autobuilder.parse.impl.DefaultParseIOSFactoryImpl;import com.enjoyf.autobuilder.service.*;import com.enjoyf.autobuilder.service.IosResource;import com.enjoyf.autobuilder.util.FileUtil;import com.enjoyf.framework.jdbc.exception.JoymeDBException;import com.enjoyf.framework.jdbc.exception.JoymeServiceException;import net.sf.json.JSONObject;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.URLEncoder;import java.util.*;import java.net.*;@Controller@RequestMapping("/build/ios/")public class IOSBuildController {    private static IParseFactory factory = new DefaultParseIOSFactoryImpl();    private IosSrcService iosSrcService = new IosSrcService();    private IosResourceService iosResourceService = new IosResourceService();    private BuildLogService buildLogService = new BuildLogService();    private BuildWebService buildWebService = new BuildWebService();    @RequestMapping("/selectcode.do")    public ModelAndView selectcode(HttpServletRequest request, HttpServletResponse response) throws Exception {        Map<String, Object> mapMessage = new HashMap<String, Object>();        List<IosResource> resourceList = iosResourceService.queryResource(null);        Set<String> pkgSet = new HashSet<String>();        for (IosResource resource : resourceList) {            pkgSet.add(resource.getResourceCode());        }        mapMessage.put("pkgSet", pkgSet);        return new ModelAndView("/build/ios/selectpkg", mapMessage);    }    @RequestMapping("/page.do")    public ModelAndView page(@RequestParam(value = "code", required = true) String code) throws Exception {        Map<String, Object> mapMessage = new HashMap<String, Object>();        BuildLog buildLog = buildLogService.getRecentBuildLog(null, code, BuildLogService.BUILD_PLATFORM_IOS, BuildLogService.BUILD_TYPE_BUILD);        if (buildLog != null) {            JSONObject object = JSONObject.fromObject(buildLog.getJsonstring());            String appkey = object.getString("appkey");            String appname = object.getString("appname");            String pkgname = object.getString("pkgname");            int srcid = object.getInt("srcid");            int resid = object.getInt("resid");            String appid = object.getString("appid");            String itunesurl = object.getString("itunesurl");            String version = object.getString("version");            String abouttitle = object.getString("abouttitle");            String onlinedomain = object.getString("onlinedomain");            String webviewhost = object.getString("webviewhost");            String betadomain = object.getString("betadomain");            String apptype = "";            if (object.has("apptype")) {                apptype = object.getString("apptype");            }            String umengKey = "";            if (object.has("umengkey")) {                umengKey = object.getString("umengkey");            }            String channels = "";            if (object.has("channel")) {                channels = object.getString("channel");            }            String envs = "";            if (object.has("env")) {                envs = object.getString("env");            }	        boolean debug = false;	        if (object.has("debug")) {		        debug = object.getBoolean("debug");	        }            mapMessage.put("appkey", appkey);            mapMessage.put("appname", appname);            mapMessage.put("pkgname", pkgname);            mapMessage.put("srcid", srcid);            mapMessage.put("resid", resid);            mapMessage.put("appid", appid);            mapMessage.put("itunesurl", itunesurl);            mapMessage.put("version", version);            mapMessage.put("abouttitle", abouttitle);            mapMessage.put("onlinedomain", onlinedomain);            mapMessage.put("betadomain", betadomain);            mapMessage.put("umengkey", umengKey);            mapMessage.put("apptype", apptype);            mapMessage.put("webviewhost", webviewhost);            mapMessage.put("channels",channels);            mapMessage.put("envs", envs);	        mapMessage.put("debug", debug);        } else {            mapMessage.put("pkgname", code);        }        List<IosSrc> srcList = iosSrcService.querySrc(null);        List<IosResource> resourceList = iosResourceService.queryResource(null);        mapMessage.put("srcList", srcList);        mapMessage.put("resourceList", resourceList);        return new ModelAndView("/build/ios/page", mapMessage);    }    @RequestMapping("/build.do")    public ModelAndView page(@RequestParam(value = "appkey", required = true) String appkey,                             @RequestParam(value = "appname", required = true) String appname,                             @RequestParam(value = "pkgname", required = true) String pkgname,                             @RequestParam(value = "srcid", required = true) Integer srcid,                             @RequestParam(value = "resid", required = true) Integer resid,                             @RequestParam(value = "appid", required = true) String appid,                             @RequestParam(value = "itunesurl", required = true) String itunesurl,                             @RequestParam(value = "abouttitle", required = true) String abouttitle,                             @RequestParam(value = "onlinedomain", required = true) String onlinedomain,                             @RequestParam(value = "apptype", required = true) String apptype,                             @RequestParam(value = "betadomain", required = false) String betadomain,                             @RequestParam(value = "umengkey", required = false) String umengkey,                             @RequestParam(value = "version", required = false) String version,                             @RequestParam(value = "webviewhost", required = false) String webviewhost,                             @RequestParam(value = "channel", required = false) String channel,                             @RequestParam(value = "env", required = false) String env,                             @RequestParam(value = "debug", required = false) boolean debug    ) throws Exception {        Map<String, Object> mapMessage = new HashMap<String, Object>();        boolean success = false;        IOSParamBean bean = new IOSParamBean();        bean.setAppName(appname);        bean.setAppKey(appkey);        bean.setAppType(apptype);        bean.setUmenKey(umengkey);        bean.setAppId(appid);        bean.setItunesUrl(itunesurl);        bean.setAboutTitle(abouttitle);        onlinedomain=onlinedomain.trim();        if (onlinedomain.startsWith("http://")) {            bean.setOnlineDomain(onlinedomain.substring("http://".length(), onlinedomain.length()));        } else {            bean.setOnlineDomain(onlinedomain);        }        betadomain=betadomain.trim();        if (betadomain != null && betadomain.length() > 0 && !betadomain.startsWith("http://")) {            bean.setBetaDomain(betadomain.substring("http://".length(), betadomain.length()));        } else {            bean.setBetaDomain(betadomain);        }        bean.setVersion(version);        bean.setWebViewHost(webviewhost);        bean.setChannel(channel);        bean.setEnvironment(env);	    bean.setDebug(debug);        IosSrc src = iosSrcService.queryIosSrcbyId(null, srcid);        bean.setSourceFileFolder(src.getSrcUrl());        bean.setTargetFileFolder(IOSConfigContainer.getTargetSourceFolder());        bean.setTargetShellFolder(IOSConfigContainer.getTargetShellFolder());        bean.setPackageReplaceStr(pkgname);        //设置资源文件信息        IosResource res = iosResourceService.queryIosResourcebyId(null, resid);        bean.setSourceResFolder(res.getResourceDir());        bean.setTargetIconsFolder(IOSConfigContainer.getTargetIconsFolder());        bean.setTargetImagesFolder(IOSConfigContainer.getTargetImagesFolder());        bean.setTargetProfilesFolder(IOSConfigContainer.getTargetProfilesFolder());        factory.setIOSParamBean(bean);        factory.execute();        JSONObject object = new JSONObject();        object.put("appkey", appkey);        object.put("appname", appname);        object.put("pkgname", pkgname);        object.put("srcid", srcid);        object.put("resid", resid);        object.put("appid", appid);        object.put("itunesurl", itunesurl);        object.put("version", version);        object.put("abouttitle", abouttitle);        object.put("onlinedomain", onlinedomain);        object.put("betadomain", betadomain);        object.put("webviewhost", webviewhost);        object.put("betadomain", betadomain);        object.put("umengkey", umengkey);        object.put("apptype", apptype);        object.put("env", env);        object.put("channel", channel);	    object.put("debug", debug);        BuildLog log = new BuildLog();        log.setBuildLogCode(pkgname);        log.setBuildPlatform(BuildLogService.BUILD_PLATFORM_IOS);        log.setJsonstring(object.toString());        log.setBuildType(BuildLogService.BUILD_TYPE_BUILD);        log = buildLogService.insertBuildLog(null, log);        success = true;        mapMessage.put("success", success);        mapMessage.put("pkgname", pkgname);        mapMessage.put("logid", log.getBuildLogId());        return new ModelAndView("/build/ios/result", mapMessage);    }    //python projectconvert.py "3LW5SErUN0n80jtqn2qL0cI" "gsdgameguide"  "kdmhgameguide"  "configfile" "口袋梦幻攻略" "1.3.005"    @RequestMapping("/packageone.do")    public ModelAndView pkgOneAction(@RequestParam(value = "logid", required = true) Long lid) throws Exception {        Map<String, Object> mapMessage = new HashMap<String, Object>();        if (!AndroidConfigContainer.build_flag) {            mapMessage.put("error", "已经在打包中请勿重复打包");            return new ModelAndView("/build/androidpkgresult", mapMessage);        }        BuildLog log = buildLogService.queryBuildLogbyId(null, lid);        JSONObject object = JSONObject.fromObject(log.getJsonstring());        String appkey = object.getString("appkey");        String appname = object.getString("appname");        String pkgname = object.getString("pkgname");        String version = object.getString("version");	    boolean debug = object.getBoolean("debug");///        runProcess("/Users/ef2013/opt/ios_builder/pkg.sh " + appkey + " tgameguide " + pkgname + " " + URLEncoder.encode(appname,"UTF-8") + " " + version );        runProcess(IOSConfigContainer.ios_root_folder + "/pkg.sh " + appkey + " " + "tgameguide" + " " + pkgname + " " + URLEncoder.encode(appname,"UTF-8") + " " + version + (debug ? " debug" : "") );        AndroidConfigContainer.build_flag = true;        writePkgLog(pkgname);        return new ModelAndView("redirect:/build/ios/downloadpage.do?pkgname=" + pkgname, mapMessage);    }    @RequestMapping("/downloadpage.do")    public ModelAndView downloadPage(@RequestParam(value = "pkgname", required = true) String pkgName) throws Exception {        Map<String, Object> mapMessage = new HashMap<String, Object>();        BuildLog buildLog = buildLogService.getRecentBuildLog(null, pkgName, BuildLogService.BUILD_PLATFORM_IOS, BuildLogService.BUILD_TYPE_PAKCAGE);        if (buildLog == null) {            //todo        }        JSONObject object = JSONObject.fromObject(buildLog.getJsonstring());        String apkpath = object.getString("outputpath");        List<String> apkPathList = buildWebService.getFileNames(apkpath);        mapMessage.put("apkPathList", apkPathList);        mapMessage.put("lid", buildLog.getBuildLogId());        try {            String ip = InetAddress.getLocalHost().getHostAddress().toString();            mapMessage.put("wirelessURL", "http://" + ip + ":8888");        }catch(Exception e) {        }        runProcess(IOSConfigContainer.ios_root_folder + "/wirelessdist.sh");        return new ModelAndView("/build/ios/download", mapMessage);    }    @RequestMapping("/download.do")    public ModelAndView download(@RequestParam(value = "name", required = true) String fileName,                                 @RequestParam(value = "logid", required = true) Long logid, HttpServletResponse response) throws Exception {        BuildLog buildLog = buildLogService.queryBuildLogbyId(null, logid);        if (buildLog == null) {            return null;        }        JSONObject object = JSONObject.fromObject(buildLog.getJsonstring());        String apkpath = object.getString("outputpath");        response = FileUtil.download(apkpath + "/" + fileName, response);        return null;    }    private void writePkgLog(String pkgName) throws JoymeServiceException, JoymeDBException {        String path = buildWebService.copyOutputIpa(pkgName);        JSONObject object = new JSONObject();        object.put("pkgname", pkgName);        object.put("outputpath", path);        BuildLog log = new BuildLog();        log.setBuildLogCode(pkgName);        log.setBuildPlatform(BuildLogService.BUILD_PLATFORM_IOS);        log.setJsonstring(object.toString());        log.setBuildType(BuildLogService.BUILD_TYPE_PAKCAGE);        buildLogService.insertBuildLog(null, log);    }    private static void runProcess(String cmd) throws IOException {        System.out.println("------run: " + cmd);        Process p = null;        InputStream fis = null;        InputStreamReader isr = null;        BufferedReader br = null;        try {            p = Runtime.getRuntime().exec(cmd);            fis = p.getInputStream();            isr = new InputStreamReader(fis);            br = new BufferedReader(isr);            String line = null;            while ((line = br.readLine()) != null) {                System.out.println(line);            }            isr = new InputStreamReader(p.getErrorStream());            br = new BufferedReader(isr);            while ((line = br.readLine()) != null) {                System.err.println(line);            }        } catch (IOException e) {            e.printStackTrace();        } finally {            if (p != null) {                p.destroy();            }            if (fis != null) {                fis.close();            }            if (isr != null) {                isr.close();            }            if (br != null) {                br.close();            }        }    }}